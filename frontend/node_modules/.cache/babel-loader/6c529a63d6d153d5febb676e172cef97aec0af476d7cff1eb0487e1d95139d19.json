{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://0.0.0.0:8000';\nconst exampleExpandedData = {\n  \"url\": \"https://arxiv.org/pdf/1810.04805.pdf\",\n  \"concepts\": [{\n    \"name\": \"Concept 1\",\n    \"referenceUrl\": \"https://referenceUrl1\",\n    \"description\": \"This is a description of Concept 1\",\n    \"referenceText\": \"\",\n    \"id\": \"\",\n    \"parent\": \"\",\n    \"children\": []\n  }, {\n    \"name\": \"Concept 2\",\n    \"referenceUrl\": \"https://referenceUrl2\",\n    \"description\": \"This is a description of Concept 2\",\n    \"referenceText\": \"\",\n    \"id\": \"\",\n    \"parent\": \"\",\n    \"children\": []\n  }\n  //... more concept nodes\n  ]\n};\n\nconst exampleLongDescription = {\n  \"expandedDescription\": \"This is an expanded description of the concept. It includes additional details and context drawn from the reference paper. For example, the original paper discusses the concept in the context of a larger study on...\"\n};\nexport function generateTwoLayers(searchTerm) {\n  return axios.post(`${BASE_URL}/query`, {\n    query: searchTerm\n  }).then(response => {\n    response.data;\n  }).catch(error => {\n    console.error('Error sending query:', error);\n    throw error;\n  });\n}\nexport function getLongDescription(node) {\n  // return axios.post(`${BASE_URL}/more-info`, { concept: node })\n  //   .then(response => {console.log(response); return response.data})\n  //   .catch(error => {\n  //     console.error('Error fetching text:', error);\n  //     throw error;\n  //   });\n  return exampleLongDescription;\n}\nexport function expandGraphWithNewNodes(nodeId) {\n  // return axios.post(`${BASE_URL}/expand-graph-with-new-nodes`, { concept: nodeId })\n  //   .then(response => response.data)\n  //   .catch(error => {\n  //     console.error('Error expanding graph with new nodes:', error);\n  //     throw error;\n  //   });\n  return exampleExpandedData;\n}","map":{"version":3,"names":["axios","BASE_URL","exampleExpandedData","exampleLongDescription","generateTwoLayers","searchTerm","post","query","then","response","data","catch","error","console","getLongDescription","node","expandGraphWithNewNodes","nodeId"],"sources":["/Users/ayushi/Desktop/repos/nexpert-frontend/src/api/apiCalls.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'http://0.0.0.0:8000';\n\nconst exampleExpandedData = {\n  \"url\": \"https://arxiv.org/pdf/1810.04805.pdf\",\n  \"concepts\": [\n    {\n      \"name\": \"Concept 1\",\n      \"referenceUrl\": \"https://referenceUrl1\",\n      \"description\": \"This is a description of Concept 1\",\n      \"referenceText\": \"\",\n      \"id\": \"\",\n      \"parent\": \"\",\n      \"children\": []\n    },\n    {\n      \"name\": \"Concept 2\",\n      \"referenceUrl\": \"https://referenceUrl2\",\n      \"description\": \"This is a description of Concept 2\",\n      \"referenceText\": \"\",\n      \"id\": \"\",\n      \"parent\": \"\",\n      \"children\": []\n    },\n    //... more concept nodes\n  ]\n}\n\nconst exampleLongDescription = {\n  \"expandedDescription\": \"This is an expanded description of the concept. It includes additional details and context drawn from the reference paper. For example, the original paper discusses the concept in the context of a larger study on...\"\n};\n\n\nexport function generateTwoLayers(searchTerm) {\n  return axios.post(`${BASE_URL}/query`, { query: searchTerm })\n    .then(response => {\n      response.data\n    })\n    .catch(error => {\n      console.error('Error sending query:', error);\n      throw error;\n    });\n}\n\nexport function getLongDescription(node) {\n  // return axios.post(`${BASE_URL}/more-info`, { concept: node })\n  //   .then(response => {console.log(response); return response.data})\n  //   .catch(error => {\n  //     console.error('Error fetching text:', error);\n  //     throw error;\n  //   });\n  return exampleLongDescription;\n}\n\nexport function expandGraphWithNewNodes(nodeId) {\n  // return axios.post(`${BASE_URL}/expand-graph-with-new-nodes`, { concept: nodeId })\n  //   .then(response => response.data)\n  //   .catch(error => {\n  //     console.error('Error expanding graph with new nodes:', error);\n  //     throw error;\n  //   });\n  return exampleExpandedData;\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,qBAAqB;AAEtC,MAAMC,mBAAmB,GAAG;EAC1B,KAAK,EAAE,sCAAsC;EAC7C,UAAU,EAAE,CACV;IACE,MAAM,EAAE,WAAW;IACnB,cAAc,EAAE,uBAAuB;IACvC,aAAa,EAAE,oCAAoC;IACnD,eAAe,EAAE,EAAE;IACnB,IAAI,EAAE,EAAE;IACR,QAAQ,EAAE,EAAE;IACZ,UAAU,EAAE;EACd,CAAC,EACD;IACE,MAAM,EAAE,WAAW;IACnB,cAAc,EAAE,uBAAuB;IACvC,aAAa,EAAE,oCAAoC;IACnD,eAAe,EAAE,EAAE;IACnB,IAAI,EAAE,EAAE;IACR,QAAQ,EAAE,EAAE;IACZ,UAAU,EAAE;EACd;EACA;EAAA;AAEJ,CAAC;;AAED,MAAMC,sBAAsB,GAAG;EAC7B,qBAAqB,EAAE;AACzB,CAAC;AAGD,OAAO,SAASC,iBAAiBA,CAACC,UAAU,EAAE;EAC5C,OAAOL,KAAK,CAACM,IAAI,CAAE,GAAEL,QAAS,QAAO,EAAE;IAAEM,KAAK,EAAEF;EAAW,CAAC,CAAC,CAC1DG,IAAI,CAACC,QAAQ,IAAI;IAChBA,QAAQ,CAACC,IAAI;EACf,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb,CAAC,CAAC;AACN;AAEA,OAAO,SAASE,kBAAkBA,CAACC,IAAI,EAAE;EACvC;EACA;EACA;EACA;EACA;EACA;EACA,OAAOZ,sBAAsB;AAC/B;AAEA,OAAO,SAASa,uBAAuBA,CAACC,MAAM,EAAE;EAC9C;EACA;EACA;EACA;EACA;EACA;EACA,OAAOf,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
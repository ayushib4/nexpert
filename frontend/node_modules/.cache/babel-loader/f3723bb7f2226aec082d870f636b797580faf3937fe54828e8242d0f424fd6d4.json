{"ast":null,"code":"var _jsxFileName = \"/Users/ayushi/Desktop/repos/nexpert-frontend/src/components/Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { NodeContext } from '../NodeContext.js';\nimport { getLongDescription, expandGraphWithNewNodes } from '../api/apiCalls.js'; // or wherever your API functions are stored\nimport './styles/Graph.css';\nimport { ExpandedNode } from 'ExpandedNode.js';\n\n// Helper functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction mergeData(nodeId, treeData, expandedData) {\n  // Function to recursively search for a node\n  function findNode(node) {\n    if (node.id === nodeId) {\n      var _node$children;\n      // Node found, append children\n      node.children = (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.concat(expandedData);\n    } else if (node.children) {\n      // Node not found, search children\n      node.children.forEach(findNode);\n    }\n  }\n\n  // Make a deep copy of the tree data and search it\n  const newTreeData = cloneDeep(treeData);\n  findNode(newTreeData);\n  return newTreeData;\n}\n\n// Function to recursively update node description\nfunction updateDescription(node, currentNode, longDescription) {\n  console.log(currentNode);\n  if (node.id === currentNode.id) {\n    // Return a new object for the node\n    return {\n      ...node,\n      description: longDescription\n    };\n  }\n  if (node.children) {\n    // Iterate through children, creating new objects for any that have changed\n    return {\n      ...node,\n      children: node.children.map(child => updateDescription(child, currentNode, longDescription))\n    };\n  }\n  // No changes to this node or its children\n  return node;\n}\n;\nconst getLongDesc = async (node, callbackFunc, currentTreeData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(currentTreeData.name);\n      const paperInsights = await getLongDescription(node, node.data.name === \"Residual calcium effects\"); // Add any necessary arguments\n      // Update node description in treeData\n      const updatedTreeData = updateDescription(currentTreeData, node.data, paperInsights);\n      callbackFunc(updatedTreeData);\n      resolve(updatedTreeData); // Return the updated data\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst expandGraph = async (node, callbackFunc, currentTreeData) => {\n  const expandedGraphData = await expandGraphWithNewNodes(node.data.id, currentTreeData.name, node);\n  const newTreeData = mergeData(node.data.id, currentTreeData, expandedGraphData);\n  callbackFunc(newTreeData);\n};\n\n// Main component\nconst Graph = () => {\n  _s();\n  const {\n    scale,\n    translate,\n    handleNodeClick,\n    currentNode,\n    loading,\n    setLoading,\n    expandedNode,\n    treeData,\n    setTreeData\n  } = useContext(NodeContext);\n  useEffect(() => {\n    if (!currentNode) return;\n    const fetchData = async () => {\n      try {\n        if (currentNode && currentNode.data) {\n          setLoading(true);\n          const updatedTreeData = await getLongDesc(currentNode, setTreeData, treeData);\n          await expandGraph(currentNode, setTreeData, updatedTreeData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [currentNode]);\n  const onClick = nodeData => {\n    handleNodeClick(nodeData);\n  };\n  const [foundNode, setFoundNode] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const findNode = (node, id) => {\n    if (node.id === id) {\n      return node;\n    }\n    if (node.children) {\n      for (let child of node.children) {\n        const result = findNode(child, id);\n        if (result) {\n          return result;\n        }\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    if (currentNode && treeData) {\n      setFoundNode(findNode(treeData, currentNode.data.id));\n    }\n  }, [currentNode, treeData]);\n  useEffect(() => {\n    if (expandedNode) {\n      setModalOpen(true);\n    }\n  }, [expandedNode]);\n  const _onClose = () => setModalOpen(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ExpandedNode, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph\",\n      style: {\n        transform: `scale(${scale})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"helperText\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Use cmd-s (in mac) or ctrl-q (in windows) to open the prompt editor.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), treeData && /*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        translate: translate,\n        onNodeClick: onClick,\n        separation: {\n          siblings: 1,\n          nonSiblings: 1\n        }\n        // pathFunc=\"step\"\n        ,\n        rootNodeClassName: \"node__root\",\n        branchNodeClassName: \"node__branch\",\n        leafNodeClassName: \"node__leaf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Graph, \"TeiYwnH7Pm73NBxflwL57YTkxQg=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Tree","cloneDeep","NodeContext","getLongDescription","expandGraphWithNewNodes","ExpandedNode","jsxDEV","_jsxDEV","Fragment","_Fragment","mergeData","nodeId","treeData","expandedData","findNode","node","id","_node$children","children","concat","forEach","newTreeData","updateDescription","currentNode","longDescription","console","log","description","map","child","getLongDesc","callbackFunc","currentTreeData","Promise","resolve","reject","name","paperInsights","data","updatedTreeData","error","expandGraph","expandedGraphData","Graph","_s","scale","translate","handleNodeClick","loading","setLoading","expandedNode","setTreeData","fetchData","onClick","nodeData","foundNode","setFoundNode","modalOpen","setModalOpen","result","_onClose","fileName","_jsxFileName","lineNumber","columnNumber","className","style","transform","onNodeClick","separation","siblings","nonSiblings","rootNodeClassName","branchNodeClassName","leafNodeClassName","_c","$RefreshReg$"],"sources":["/Users/ayushi/Desktop/repos/nexpert-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { NodeContext } from '../NodeContext.js';\nimport { getLongDescription, expandGraphWithNewNodes } from '../api/apiCalls.js'; // or wherever your API functions are stored\nimport './styles/Graph.css';\nimport {ExpandedNode} from 'ExpandedNode.js';\n\n// Helper functions\nfunction mergeData(nodeId, treeData, expandedData) {\n  // Function to recursively search for a node\n  function findNode(node) {\n    if (node.id === nodeId) {\n      // Node found, append children\n      node.children = node.children?.concat(expandedData);\n    } else if (node.children) {\n      // Node not found, search children\n      node.children.forEach(findNode);\n    }\n  }\n\n  // Make a deep copy of the tree data and search it\n  const newTreeData = cloneDeep(treeData);\n  findNode(newTreeData);\n\n  return newTreeData;\n}\n\n// Function to recursively update node description\nfunction updateDescription(node, currentNode, longDescription) {\n  console.log(currentNode);\n  if (node.id === currentNode.id) {\n    // Return a new object for the node\n    return { ...node, description: longDescription };\n  }\n  if (node.children) {\n    // Iterate through children, creating new objects for any that have changed\n    return {\n      ...node,\n      children: node.children.map(child => updateDescription(child, currentNode, longDescription)),\n    };\n  }\n  // No changes to this node or its children\n  return node;\n};\n\nconst getLongDesc = async (node, callbackFunc, currentTreeData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(currentTreeData.name)\n      const paperInsights = await getLongDescription(node, node.data.name === \"Residual calcium effects\"); // Add any necessary arguments\n      // Update node description in treeData\n      const updatedTreeData = updateDescription(currentTreeData, node.data, paperInsights);\n      callbackFunc(updatedTreeData);\n      resolve(updatedTreeData); // Return the updated data\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nconst expandGraph = async (node, callbackFunc, currentTreeData) => {\n  const expandedGraphData = await expandGraphWithNewNodes(node.data.id, currentTreeData.name, node,);\n  const newTreeData = mergeData(node.data.id, currentTreeData, expandedGraphData);\n  callbackFunc(newTreeData)\n}\n\n// Main component\nconst Graph = () => {\n  const { scale, translate, handleNodeClick, currentNode, loading, setLoading, expandedNode, treeData, setTreeData } = useContext(NodeContext);\n\n  useEffect(() => {\n    if (!currentNode) return;\n\n    const fetchData = async () => {\n      try {\n        if (currentNode && currentNode.data) {\n          setLoading(true);\n          const updatedTreeData = await getLongDesc(currentNode, setTreeData, treeData);\n          await expandGraph(currentNode, setTreeData, updatedTreeData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, [currentNode]);\n\n\n  const onClick = (nodeData) => {\n    handleNodeClick(nodeData);\n  };\n\n  const [foundNode, setFoundNode] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const findNode = (node, id) => {\n    if (node.id === id) {\n      return node;\n    }\n\n    if (node.children) {\n      for (let child of node.children) {\n        const result = findNode(child, id);\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  useEffect(() => {\n    if (currentNode && treeData) {\n      setFoundNode(findNode(treeData, currentNode.data.id));\n    }\n  }, [currentNode, treeData]);\n\n  useEffect(() => {\n    if (expandedNode) {\n      setModalOpen(true)\n    }\n  }, [expandedNode])\n\n  const _onClose = () => setModalOpen(false);\n\n\n  return (\n    <>\n      <ExpandedNode />\n      <div className=\"graph\" style={{ transform: `scale(${scale})` }}>\n        <div className=\"helperText\"><i>Use cmd-s (in mac) or ctrl-q (in windows) to open the prompt editor.</i></div>\n        {treeData && (\n          <Tree\n            data={treeData}\n            translate={translate}\n            onNodeClick={onClick}\n            separation={{ siblings: 1, nonSiblings: 1 }}\n            // pathFunc=\"step\"\n            rootNodeClassName=\"node__root\"\n            branchNodeClassName=\"node__branch\"\n            leafNodeClassName=\"node__leaf\"\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}